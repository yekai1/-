def createarithmetic(self):
    list = []
    f1 = function1.function1()
    f2 = function2()
    operator_no = random.randint(1,3)
    if operator_no == 1:
        list.append(f1.createNum())
        list.append(f2.createOperator())
        list.append(f1.createNum())
    elif operator_no == 2:
        start = random.randint(0,2)
        end = 0
        if start == 0:
            end == 0
        else:
            end = start +1
        for i in range(1,4):
            if i == start:
                list.append("(")
            list.append(f1.createNum())
            if i == end:
                list.append(")")
            list.append(f2.createOperator())
        list.pop()
    elif operator_no == 3:
        start = random.randint(0, 3)
        end = 0
        if start == 0:
            end == 0
        else:
            end = start + 1 + random.randint(0,1)
            if end >= 4:
                end=4
        for i in range(1, 5):
            if i == start:
                list.append("(")
            list.append(f1.createNum())
            if i == end:
                list.append(")")
            list.append(f2.createOperator())
        list.pop()
    else:
        list.append(f1.createNum())
        list.append(f2.createOperator())
        list.append(f1.createNum())
    return  list
    def toRPN(self,list):
    right = []
    aStack = []
    position = 0
    while True:
        if self.isOperator(list[position]):
            if list ==[] or list[position] == "(" :
                aStack.append(list[position])
            else:
                if list[position] == ")":
                    while True:
                        if aStack != [] and aStack[-1] !="(" :
                            operator = aStack.pop()
                            right.append(operator)
                        else :
                            if aStack !=[]:
                                aStack.pop()
                            break
                else:
                    while True:
                        if aStack != [] and self.priority(list[position],aStack[-1]):
                            operator = aStack.pop()
                            if operator != "(":
                                right.append(operator)
                        else:
                            break
                    aStack.append(list[position])
        else:
            right.append(list[position])
        position = position +1
        if position >= len(list):
            break
    while aStack != []:
        operator = aStack.pop()
        if operator != "(":
            right.append(operator)
    return  right
